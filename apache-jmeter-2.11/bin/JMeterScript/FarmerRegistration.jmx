<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="FarmerRegistration" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="num1" elementType="Argument">
            <stringProp name="Argument.name">num1</stringProp>
            <stringProp name="Argument.value">${__P(num1,7000000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="num2" elementType="Argument">
            <stringProp name="Argument.name">num2</stringProp>
            <stringProp name="Argument.value">${__P(num2,8000000000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port1" elementType="Argument">
            <stringProp name="Argument.name">port1</stringProp>
            <stringProp name="Argument.value">${__P(port1,8091)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port2" elementType="Argument">
            <stringProp name="Argument.name">port2</stringProp>
            <stringProp name="Argument.value">${__P(port2,8093)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">${__P(hostName,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="country" elementType="Argument">
            <stringProp name="Argument.name">country</stringProp>
            <stringProp name="Argument.value">${__P(country,IN)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="gaussianDeviation" elementType="Argument">
            <stringProp name="Argument.name">gaussianDeviation</stringProp>
            <stringProp name="Argument.value">${__P(gaussianDeviation,300)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="gaussianOffset" elementType="Argument">
            <stringProp name="Argument.name">gaussianOffset</stringProp>
            <stringProp name="Argument.value">${__P(gaussianOffset,100)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FarmerRegistration" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loop)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadCount)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUpPeriodInSeconds)}</stringProp>
        <longProp name="ThreadGroup.start_time">1412824976000</longProp>
        <longProp name="ThreadGroup.end_time">1412824976000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${port1}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${__P(timeOut,5000)}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${__P(timeOut,5000)}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Encoding</stringProp>
              <stringProp name="Header.value">UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Register parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="mobileNumber" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="growerName" elementType="Argument">
              <stringProp name="Argument.name">growerName</stringProp>
              <stringProp name="Argument.value">Test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber2" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber2</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber3" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber3</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber4" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber4</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="languagePreference" elementType="Argument">
              <stringProp name="Argument.name">languagePreference</stringProp>
              <stringProp name="Argument.value">en_IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gender" elementType="Argument">
              <stringProp name="Argument.name">gender</stringProp>
              <stringProp name="Argument.value">Mr</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">MH</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="district" elementType="Argument">
              <stringProp name="Argument.name">district</stringProp>
              <stringProp name="Argument.value">Pune</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="taluk" elementType="Argument">
              <stringProp name="Argument.name">taluk</stringProp>
              <stringProp name="Argument.value">Khed</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="village" elementType="Argument">
              <stringProp name="Argument.name">village</stringProp>
              <stringProp name="Argument.value">Alandi </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="income" elementType="Argument">
              <stringProp name="Argument.name">income</stringProp>
              <stringProp name="Argument.value">Rs 50,001 to Rs 75,000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lat" elementType="Argument">
              <stringProp name="Argument.name">lat</stringProp>
              <stringProp name="Argument.value">17.7178° N</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="long" elementType="Argument">
              <stringProp name="Argument.name">long</stringProp>
              <stringProp name="Argument.value">73.3939° E</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="phoneModel" elementType="Argument">
              <stringProp name="Argument.name">phoneModel</stringProp>
              <stringProp name="Argument.value">SmartPhone</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="education" elementType="Argument">
              <stringProp name="Argument.name">education</stringProp>
              <stringProp name="Argument.value">Graduation</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dateOfBirth" elementType="Argument">
              <stringProp name="Argument.name">dateOfBirth</stringProp>
              <stringProp name="Argument.value">15/02/1975</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agentName" elementType="Argument">
              <stringProp name="Argument.name">agentName</stringProp>
              <stringProp name="Argument.value">test.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Search parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="phoneNumber" elementType="Argument">
              <stringProp name="Argument.name">phoneNumber</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="regionCode" elementType="Argument">
              <stringProp name="Argument.name">regionCode</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Farm Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="landHolding" elementType="Argument">
              <stringProp name="Argument.name">landHolding</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="soilType" elementType="Argument">
              <stringProp name="Argument.name">soilType</stringProp>
              <stringProp name="Argument.value">HEAVY</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="canIrrigate" elementType="Argument">
              <stringProp name="Argument.name">canIrrigate</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="irrigationType" elementType="Argument">
              <stringProp name="Argument.name">irrigationType</stringProp>
              <stringProp name="Argument.value">Sprinkler</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ownershipOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">ownershipOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="typeOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">typeOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Tractor</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Financial Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="loan" elementType="Argument">
              <stringProp name="Argument.name">loan</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financialOrganization" elementType="Argument">
              <stringProp name="Argument.name">financialOrganization</stringProp>
              <stringProp name="Argument.value">HDFC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanDetails" elementType="Argument">
              <stringProp name="Argument.name">loanDetails</stringProp>
              <stringProp name="Argument.value">Loan term is 10 years</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsurance" elementType="Argument">
              <stringProp name="Argument.name">weatherInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetails</stringProp>
              <stringProp name="Argument.value">HDFC ERGO</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Weather insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsurance" elementType="Argument">
              <stringProp name="Argument.name">cropInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetails</stringProp>
              <stringProp name="Argument.value">ICICI Lombard</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Crop insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Crop Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="cropName" elementType="Argument">
              <stringProp name="Argument.name">cropName</stringProp>
              <stringProp name="Argument.value">Cotton</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preferredCropLand" elementType="Argument">
              <stringProp name="Argument.name">preferredCropLand</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropPractice" elementType="Argument">
              <stringProp name="Argument.name">interCropPractice</stringProp>
              <stringProp name="Argument.value">Parallel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsyield" elementType="Argument">
              <stringProp name="Argument.name">previousYearsyield</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridName" elementType="Argument">
              <stringProp name="Argument.name">hybridName</stringProp>
              <stringProp name="Argument.value">BRAHMABG2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acerAge" elementType="Argument">
              <stringProp name="Argument.name">acerAge</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="seedCompany" elementType="Argument">
              <stringProp name="Argument.name">seedCompany</stringProp>
              <stringProp name="Argument.value">Monsanto</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sowingDt" elementType="Argument">
              <stringProp name="Argument.name">sowingDt</stringProp>
              <stringProp name="Argument.value">2015-01-01T12:00:00.000Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="daysAfterSowing" elementType="Argument">
              <stringProp name="Argument.name">daysAfterSowing</stringProp>
              <stringProp name="Argument.value">-2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridIdentificationNo" elementType="Argument">
              <stringProp name="Argument.name">hybridIdentificationNo</stringProp>
              <stringProp name="Argument.value">&quot;L1&quot;,&quot;G5&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsYieldUnit" elementType="Argument">
              <stringProp name="Argument.name">previousYearsYieldUnit</stringProp>
              <stringProp name="Argument.value">Quintals</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropNameList" elementType="Argument">
              <stringProp name="Argument.name">interCropNameList</stringProp>
              <stringProp name="Argument.value">&quot;CUCUMBER&quot;,&quot;BEANS&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Countries LookUp Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="countries_1" elementType="Argument">
              <stringProp name="Argument.name">countries_1</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_2" elementType="Argument">
              <stringProp name="Argument.name">countries_2</stringProp>
              <stringProp name="Argument.value">US</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_3" elementType="Argument">
              <stringProp name="Argument.name">countries_3</stringProp>
              <stringProp name="Argument.value">ALL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FarmerSearch Servcies" enabled="true"/>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${__P(gaussianOffset,100)}</stringProp>
            <stringProp name="RandomTimer.range">${__P(gaussianDeviation,300)}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler- Before Test" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// long number = ${__Random(1500000000,1500001000)}
// long number = (${__Random(15000000,15001000)} * 100)
def number = ${__P(mobileNumber)}

def number2 = number + 10
def number3 = number + 20
def number4 = number + 30

vars.put(&quot;mobileNumber&quot;, String.valueOf(number))

vars.put(&quot;mobileNumber2&quot;, String.valueOf(number2))
vars.put(&quot;mobileNumber3&quot;, String.valueOf(number3))
vars.put(&quot;mobileNumber4&quot;, String.valueOf(number4))

number = number + 100
${__setProperty(mobileNumber, String.valueOf(number))}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Prepare Test" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//long number = ${__Random(${num1},${num2})}

//def number = ${__P(mobileNumber)}
log.info(number)
number2 = number + 10
number3 = number + 20
number4 = number + 30

vars.put(&quot;mobileNumber&quot;, String.valueOf(number))
vars.put(&quot;mobileNumber2&quot;, String.valueOf(number2))
vars.put(&quot;mobileNumber3&quot;, String.valueOf(number3))
vars.put(&quot;mobileNumber4&quot;, String.valueOf(number4))


number = number + 100
${__setProperty(mobileNumber, String.valueOf(number))}

vars.put(&quot;growerId&quot;, null)
vars.put(&quot;farmId&quot;,null)
vars.put(&quot;cropId&quot;,null)
vars.put(&quot;financialId&quot;,null)
</stringProp>
          </BSFSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterGrower - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;regionCode&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName} ${__RandomString(8,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
    &quot;mobileNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;otherPhoneNumbers&quot;: [&#xd;
    					&quot;${__longSum(${mobileNumber},10,mobileNumber2)}&quot;,&#xd;
        				&quot;${__longSum(${mobileNumber},20,mobileNumber3)}&quot;,&#xd;
        				&quot;${__longSum(${mobileNumber},30,mobileNumber4)}&quot;&#xd;
    ],&#xd;
    &quot;languagePreference&quot;: &quot;${languagePreference}&quot;,&#xd;
    &quot;gender&quot;: &quot;${gender}&quot;,&#xd;
    &quot;state&quot;: &quot;${state}&quot;,&#xd;
    &quot;district&quot;: &quot;${district}&quot;,&#xd;
    &quot;taluk&quot;: &quot;${taluk}&quot;,&#xd;
    &quot;village&quot;: &quot;${village}&quot;,&#xd;
    &quot;education&quot;: &quot;${education}&quot;,&#xd;
    &quot;income&quot;: &quot;${income}&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;${dateOfBirth}&quot;,&#xd;
    &quot;phoneModel&quot;: &quot;${phoneModel}&quot;,&#xd;
    &quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
    &quot;latitude&quot;:&quot;18.9750? N&quot;,&#xd;
    &quot;longitude&quot;:&quot;72.8258? E&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/registerGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">//To get the value of property mobileNumber and store it to the current thread-loop variable mobileNumber 
vars.put(&quot;mobileNumber&quot;, String.valueOf(${__P(mobileNumber)}))

//To increment property mobileNumber
${__setProperty(mobileNumber,${__longSum(${__P(mobileNumber)},100,)})}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

assert result.mobileNumber == &quot;${mobileNumber}&quot;

assert result.otherPhoneNumbers instanceof List

assert result.otherPhoneNumbers.size() &lt;= 3

assert result.regionCode == &quot;${regionCode}&quot;

assert result.growerId != null 

assert result.growerName == &quot;${growerName}&quot;

assert result.gender == &quot;${gender}&quot; 

assert result.languagePreference == &quot;${languagePreference}&quot;

assert result.state == &quot;${state}&quot;
assert result.district == &quot;${district}&quot;
assert result.taluk == &quot;${taluk}&quot;

assert result.village == &quot;${village}&quot;

assert result.income == &quot;${income}&quot;
assert result.education == &quot;${education}&quot;

assert result.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert result.phoneModel == &quot;${phoneModel}&quot;

// More detailed date assertion
//assert result.dob ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

//assert result.latitude == ${lat}
//assert result.longitude == ${long}

/* assert (result.mobileNumber == ${mobileNumber} || 
   result.otherPhoneNumbers[0] == ${mobileNumber} ||
   result.otherPhoneNumbers[1] == ${mobileNumber} ||
   result.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">growerId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;growerId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addAdditionalInfo" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
	&quot;comments&quot;: &quot;This Farmer was created while testing&quot;,&#xd;
	&quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
	&quot;loggedTime&quot;: &quot;${__time(dd/mm/YYYY)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/addAdditionalInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber == &quot;${mobileNumber}&quot;

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != null 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower- growerId - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber != null

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != ${growerId} 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFarm - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${phoneNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;landHolding&quot;: ${landHolding},&#xd;
    &quot;soilType&quot;: &quot;${soilType}&quot;,&#xd;
    &quot;canIrrigate&quot;: &quot;${canIrrigate}&quot;,&#xd;
    &quot;irrigationType&quot;: &quot;${irrigationType}&quot;,&#xd;
    &quot;ownershipOfFarmingVehicle&quot;: &quot;${ownershipOfFarmingVehicle}&quot;,&#xd;
    &quot;typeOfFarmingVehicle&quot;: &quot;${typeOfFarmingVehicle}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveFarm</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

// Defect 11-11-2014
//assert result.mobileNumber == &quot;${mobileNumber}&quot; // mobileNumber OR phoneNumber

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.farmId != null 

assert result.landHolding == &quot;${landHolding}&quot;

assert result.soilType == &quot;${soilType}&quot;

assert result.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert result.irrigationType == &quot;${irrigationType}&quot;
}

assert result.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert result.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*
 assert   (result.mobileNumber == ${mobileNumber} || 
         result.otherPhoneNumbers[0] == ${mobileNumber} ||
         result.otherPhoneNumbers[1] == ${mobileNumber} ||
         result.otherPhoneNumbers[2] == ${mobileNumber})
*/

</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">farmId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;farmId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllFarms - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/getAllFarms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString()) 

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

// Defect 11-11-2014
//assert resultZero.mobileNumber == &quot;${mobileNumber}&quot; 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.farmId != null 

assert resultZero.landHolding == &quot;${landHolding}&quot;

assert resultZero.soilType == &quot;${soilType}&quot;

assert resultZero.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert resultZero.irrigationType == &quot;${irrigationType}&quot;
}

assert resultZero.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert resultZero.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers[0] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveCrop - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
        &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
        &quot;farmId&quot;: &quot;${farmId}&quot;,&#xd;
        &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
        &quot;cropName&quot;: &quot;${cropName}&quot;,&#xd;
        &quot;preferredCropLand&quot;: &quot;${preferredCropLand}&quot;,&#xd;
        &quot;interCropPractice&quot;: &quot;${interCropPractice}&quot;,&#xd;
        &quot;previousYearsYieldUnit&quot;: &quot;${previousYearsYieldUnit}&quot;,&#xd;
        &quot;previousYearsyield&quot;: &quot;${previousYearsyield}&quot;,&#xd;
        &quot;interCropNameList&quot;: [${interCropNameList}],&#xd;
        &quot;hybrids&quot;: {&#xd;
            &quot;${hybridName}&quot;: {&#xd;
                &quot;acerAge&quot;: &quot;${acerAge}&quot;,&#xd;
                &quot;seedCompany&quot;: &quot;${seedCompany}&quot;,&#xd;
                &quot;sowingDt&quot;: &quot;${sowingDt}&quot;,&#xd;
                &quot;daysAfterSowing&quot;: &quot;${daysAfterSowing}&quot;,&#xd;
                &quot;hybridIdentificationNo&quot;: [${hybridIdentificationNo}]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveCrop</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

// Will result show all crops or crops in request ?
assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cropId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;cropId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerCrop - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
      &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
      &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerCrop</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFinancial - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;loan&quot;: &quot;${loan}&quot;,&#xd;
    &quot;financialOrganization&quot;: &quot;${financialOrganization}&quot;,&#xd;
    &quot;loanDetails&quot;: &quot;${loanDetails}&quot;,&#xd;
    &quot;cropInsurance&quot;: &quot;${cropInsurance}&quot;,&#xd;
    &quot;cropInsuranceDetails&quot;: &quot;${cropInsuranceDetails}&quot;,&#xd;
    &quot;weatherInsurance&quot;: &quot;${weatherInsurance}&quot;,&#xd;
    &quot;weatherInsuranceDetails&quot;: &quot;${weatherInsuranceDetails}&quot;,&#xd;
    &quot;cropInsuranceDetailsText&quot;: &quot;${cropInsuranceDetailsText}&quot;,&#xd;
    &quot;weatherInsuranceDetailsText&quot;: &quot;${weatherInsuranceDetailsText}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveFinancial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result.growerId != null 

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.financialId != null 

assert result.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert result.financialOrganization == &quot;${financialOrganization}&quot;
	assert result.loanDetails == &quot;${loanDetails}&quot;
}

assert result.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert result.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert result.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert result.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert result.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert result.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">financialId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;financialId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerFinancial - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerFinancial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber[0] == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName[0] == &quot;${growerName}&quot;

assert resultZero.financialId != null 

assert resultZero.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert resultZero.financialOrganization == &quot;${financialOrganization}&quot;
	assert resultZero.loanDetails == &quot;${loanDetails}&quot;
}

assert resultZero.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert resultZero.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert resultZero.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert resultZero.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler- After Test" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LookUp Services" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
            <stringProp name="HTTPSampler.port">${port2}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demographic services" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/country/${country}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert prev.isResponseCodeOK()
log.info(&quot;Execution Continues&quot;)

assert result instanceof List

def resultSize = result.size()

assert resultSize == 1

def resultZero = result[0]

assert resultZero instanceof Map

assert resultZero.countryId != null
assert resultZero.countryName != null
assert resultZero.countryCode != null

assert resultZero.mobilenumberlength != null

assert resultZero.availablecurrency instanceof Map
assert resultZero.availablecurrency.size() &gt;= 1

assert resultZero.selectedcurrency instanceof Map
assert resultZero.selectedcurrency.size() == 1

assert resultZero.defaultlanguage != null
assert resultZero.defaultlanguageid != null

def defLang = resultZero.defaultlanguage
def defLangId = resultZero.defaultlanguageid

assert resultZero.availablelanguages.size() &gt;= 1

assert resultZero.availablelanguages.&quot;${defLangId}&quot; == &quot;${defLang}&quot;

/////////////////////////////////////////////////////////////////////////////
assert resultZero.availablelanguages.values().containsAll(resultZero.supportedlanguages.values())
////////////////////////////////////////////////////////////////////////////

assert resultZero.availableweights instanceof List
assert resultZero.availableweights.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availableweights.containsAll(resultZero.selectedweight)



assert resultZero.availablelandholdingunit instanceof List
assert resultZero.availablelandholdingunit.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availablelandholdingunit.containsAll(resultZero.seletedlandholdingunit)

assert resultZero.minlandholdingunit == 1
assert resultZero.maxlandholdingunit == 200

assert resultZero.education instanceof List
assert resultZero.education.size() &gt;= 1

assert resultZero.income instanceof List
assert resultZero.income.size() &gt;= 1

assert resultZero.availablefinancialorganization instanceof List
assert resultZero.availablefinancialorganization.size() &gt;= 1

assert resultZero.availablefinancialorganization.containsAll(resultZero.selectedfinancialorganization)

assert resultZero.loanrange instanceof List
assert resultZero.loanrange.size() &gt;= 1

assert resultZero.soiltype instanceof List
assert resultZero.soiltype.size() &gt;= 1

assert resultZero.irrigationtype instanceof List
assert resultZero.irrigationtype.size() &gt;= 1

// Crop ....

assert resultZero.crop instanceof Map
assert resultZero.crop.size() &gt;= 1



//Crop

assert resultZero.salutations instanceof List
assert resultZero.salutations.size() &gt;= 1

assert resultZero.phoneModels instanceof List
assert resultZero.phoneModels.size() &gt;= 1

assert resultZero.registrationChannels instanceof List
assert resultZero.registrationChannels.size() &gt;= 1

assert resultZero.subscriptions instanceof List
assert resultZero.subscriptions.size() &gt;= 1

assert resultZero.farmVehicleTypes instanceof List
assert resultZero.farmVehicleTypes.size() &gt;= 1

assert resultZero.interCropPractices instanceof List
assert resultZero.interCropPractices.size() &gt;= 1

assert resultZero.farmLandHolding instanceof List
assert resultZero.farmLandHolding.size() &gt;= 1

assert resultZero.preferredCropLandHolding instanceof List
assert resultZero.preferredCropLandHolding.size() &gt;= 1

assert resultZero.hybridAcreage instanceof List
assert resultZero.hybridAcreage.size() &gt;= 1

/*
assert resultZero.availablelanguages.containsKey(&quot;en_IN&quot;)  
assert resultZero.availablelanguages.containsValue(&quot;English&quot;) 

*/




</stringProp>
              </BSFAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;${country}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - District" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;${country}&quot;,&#xd;
	&quot;level1&quot;:&quot;${country}-${state}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - Taluk" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;IN&quot;,&#xd;
	&quot;level1&quot;:&quot;${country}-${state}&quot;,&#xd;
	&quot;level2&quot;:&quot;${district}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="temp" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1412824976000</longProp>
        <longProp name="ThreadGroup.end_time">1412824976000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">54.165.108.226</stringProp>
          <stringProp name="HTTPSampler.port">8091</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">10000</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Encoding</stringProp>
              <stringProp name="Header.value">UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Register parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="mobileNumber" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber</stringProp>
              <stringProp name="Argument.value">1234123456</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="growerName" elementType="Argument">
              <stringProp name="Argument.name">growerName</stringProp>
              <stringProp name="Argument.value">Test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber2" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber2</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber3" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber3</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber4" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber4</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="languagePreference" elementType="Argument">
              <stringProp name="Argument.name">languagePreference</stringProp>
              <stringProp name="Argument.value">en_IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gender" elementType="Argument">
              <stringProp name="Argument.name">gender</stringProp>
              <stringProp name="Argument.value">Mr</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">IN-MH</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="district" elementType="Argument">
              <stringProp name="Argument.name">district</stringProp>
              <stringProp name="Argument.value">Pune</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="taluk" elementType="Argument">
              <stringProp name="Argument.name">taluk</stringProp>
              <stringProp name="Argument.value">Khed</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="village" elementType="Argument">
              <stringProp name="Argument.name">village</stringProp>
              <stringProp name="Argument.value">Alandi </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="income" elementType="Argument">
              <stringProp name="Argument.name">income</stringProp>
              <stringProp name="Argument.value">Rs 50,001 to Rs 75,000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lat" elementType="Argument">
              <stringProp name="Argument.name">lat</stringProp>
              <stringProp name="Argument.value">17.7178° N</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="long" elementType="Argument">
              <stringProp name="Argument.name">long</stringProp>
              <stringProp name="Argument.value">73.3939° E</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="phoneModel" elementType="Argument">
              <stringProp name="Argument.name">phoneModel</stringProp>
              <stringProp name="Argument.value">SmartPhone</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="education" elementType="Argument">
              <stringProp name="Argument.name">education</stringProp>
              <stringProp name="Argument.value">Graduation</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dateOfBirth" elementType="Argument">
              <stringProp name="Argument.name">dateOfBirth</stringProp>
              <stringProp name="Argument.value">15/02/1975</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agentName" elementType="Argument">
              <stringProp name="Argument.name">agentName</stringProp>
              <stringProp name="Argument.value">test.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Search parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="phoneNumber" elementType="Argument">
              <stringProp name="Argument.name">phoneNumber</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="regionCode" elementType="Argument">
              <stringProp name="Argument.name">regionCode</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Farm Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="landHolding" elementType="Argument">
              <stringProp name="Argument.name">landHolding</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="soilType" elementType="Argument">
              <stringProp name="Argument.name">soilType</stringProp>
              <stringProp name="Argument.value">HEAVY</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="canIrrigate" elementType="Argument">
              <stringProp name="Argument.name">canIrrigate</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="irrigationType" elementType="Argument">
              <stringProp name="Argument.name">irrigationType</stringProp>
              <stringProp name="Argument.value">Sprinkler</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ownershipOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">ownershipOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="typeOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">typeOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Tractor</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Financial Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="loan" elementType="Argument">
              <stringProp name="Argument.name">loan</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financialOrganization" elementType="Argument">
              <stringProp name="Argument.name">financialOrganization</stringProp>
              <stringProp name="Argument.value">HDFC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanDetails" elementType="Argument">
              <stringProp name="Argument.name">loanDetails</stringProp>
              <stringProp name="Argument.value">Loan term is 10 years</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsurance" elementType="Argument">
              <stringProp name="Argument.name">weatherInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetails</stringProp>
              <stringProp name="Argument.value">HDFC ERGO</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Weather insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsurance" elementType="Argument">
              <stringProp name="Argument.name">cropInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetails</stringProp>
              <stringProp name="Argument.value">ICICI Lombard</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Crop insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Crop Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="cropName" elementType="Argument">
              <stringProp name="Argument.name">cropName</stringProp>
              <stringProp name="Argument.value">Cotton</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preferredCropLand" elementType="Argument">
              <stringProp name="Argument.name">preferredCropLand</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropPractice" elementType="Argument">
              <stringProp name="Argument.name">interCropPractice</stringProp>
              <stringProp name="Argument.value">Parallel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsyield" elementType="Argument">
              <stringProp name="Argument.name">previousYearsyield</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridName" elementType="Argument">
              <stringProp name="Argument.name">hybridName</stringProp>
              <stringProp name="Argument.value">BRAHMABG2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acerAge" elementType="Argument">
              <stringProp name="Argument.name">acerAge</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="seedCompany" elementType="Argument">
              <stringProp name="Argument.name">seedCompany</stringProp>
              <stringProp name="Argument.value">Monsanto</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sowingDt" elementType="Argument">
              <stringProp name="Argument.name">sowingDt</stringProp>
              <stringProp name="Argument.value">2015-01-01T12:00:00.000Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="daysAfterSowing" elementType="Argument">
              <stringProp name="Argument.name">daysAfterSowing</stringProp>
              <stringProp name="Argument.value">-2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridIdentificationNo" elementType="Argument">
              <stringProp name="Argument.name">hybridIdentificationNo</stringProp>
              <stringProp name="Argument.value">&quot;L1&quot;,&quot;G5&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsYieldUnit" elementType="Argument">
              <stringProp name="Argument.name">previousYearsYieldUnit</stringProp>
              <stringProp name="Argument.value">Quintals</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropNameList" elementType="Argument">
              <stringProp name="Argument.name">interCropNameList</stringProp>
              <stringProp name="Argument.value">&quot;CUCUMBER&quot;,&quot;BEANS&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Countries LookUp Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="countries_1" elementType="Argument">
              <stringProp name="Argument.name">countries_1</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_2" elementType="Argument">
              <stringProp name="Argument.name">countries_2</stringProp>
              <stringProp name="Argument.value">US</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_3" elementType="Argument">
              <stringProp name="Argument.name">countries_3</stringProp>
              <stringProp name="Argument.value">ALL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FarmerSearch Servcies" enabled="true"/>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">${__P(gaussianOffset,100)}</stringProp>
            <stringProp name="RandomTimer.range">${__P(gaussianDeviation,300)}</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler- Before Test" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// long number = ${__Random(1500000000,1500001000)}
// long number = (${__Random(15000000,15001000)} * 100)
def number = ${__P(mobileNumber)}

def number2 = number + 10
def number3 = number + 20
def number4 = number + 30

vars.put(&quot;mobileNumber&quot;, String.valueOf(number))

vars.put(&quot;mobileNumber2&quot;, String.valueOf(number2))
vars.put(&quot;mobileNumber3&quot;, String.valueOf(number3))
vars.put(&quot;mobileNumber4&quot;, String.valueOf(number4))

number = number + 100
${__setProperty(mobileNumber, String.valueOf(number))}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Prepare Test" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//long number = ${__Random(${num1},${num2})}

//def number = ${__P(mobileNumber)}
log.info(number)
number2 = number + 10
number3 = number + 20
number4 = number + 30

vars.put(&quot;mobileNumber&quot;, String.valueOf(number))
vars.put(&quot;mobileNumber2&quot;, String.valueOf(number2))
vars.put(&quot;mobileNumber3&quot;, String.valueOf(number3))
vars.put(&quot;mobileNumber4&quot;, String.valueOf(number4))


number = number + 100
${__setProperty(mobileNumber, String.valueOf(number))}

vars.put(&quot;growerId&quot;, null)
vars.put(&quot;farmId&quot;,null)
vars.put(&quot;cropId&quot;,null)
vars.put(&quot;financialId&quot;,null)
</stringProp>
          </BSFSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterGrower - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;regionCode&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName} ${__RandomString(8,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)}&quot;,&#xd;
    &quot;mobileNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;otherPhoneNumbers&quot;: [&#xd;
    					&quot;${__longSum(${mobileNumber},10,mobileNumber2)}&quot;,&#xd;
        				&quot;${__longSum(${mobileNumber},20,mobileNumber3)}&quot;,&#xd;
        				&quot;${__longSum(${mobileNumber},30,mobileNumber4)}&quot;&#xd;
    ],&#xd;
    &quot;languagePreference&quot;: &quot;${languagePreference}&quot;,&#xd;
    &quot;gender&quot;: &quot;${gender}&quot;,&#xd;
    &quot;state&quot;: &quot;${state}&quot;,&#xd;
    &quot;district&quot;: &quot;${district}&quot;,&#xd;
    &quot;taluk&quot;: &quot;${taluk}&quot;,&#xd;
    &quot;village&quot;: &quot;${village}&quot;,&#xd;
    &quot;education&quot;: &quot;${education}&quot;,&#xd;
    &quot;income&quot;: &quot;${income}&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;${dateOfBirth}&quot;,&#xd;
    &quot;phoneModel&quot;: &quot;${phoneModel}&quot;,&#xd;
    &quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
    &quot;latitude&quot;:&quot;18.9750? N&quot;,&#xd;
    &quot;longitude&quot;:&quot;72.8258? E&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/registerGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">//To get the value of property mobileNumber and store it to the current thread-loop variable mobileNumber 
vars.put(&quot;mobileNumber&quot;, String.valueOf(${__P(mobileNumber)}))

//To increment property mobileNumber
${__setProperty(mobileNumber,${__longSum(${__P(mobileNumber)},100,)})}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

assert result.mobileNumber == &quot;${mobileNumber}&quot;

assert result.otherPhoneNumbers instanceof List

assert result.otherPhoneNumbers.size() &lt;= 3

assert result.regionCode == &quot;${regionCode}&quot;

assert result.growerId != null 

assert result.growerName == &quot;${growerName}&quot;

assert result.gender == &quot;${gender}&quot; 

assert result.languagePreference == &quot;${languagePreference}&quot;

assert result.state == &quot;${state}&quot;
assert result.district == &quot;${district}&quot;
assert result.taluk == &quot;${taluk}&quot;

assert result.village == &quot;${village}&quot;

assert result.income == &quot;${income}&quot;
assert result.education == &quot;${education}&quot;

assert result.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert result.phoneModel == &quot;${phoneModel}&quot;

// More detailed date assertion
//assert result.dob ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

//assert result.latitude == ${lat}
//assert result.longitude == ${long}

/* assert (result.mobileNumber == ${mobileNumber} || 
   result.otherPhoneNumbers[0] == ${mobileNumber} ||
   result.otherPhoneNumbers[1] == ${mobileNumber} ||
   result.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">growerId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;growerId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addAdditionalInfo" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
	&quot;comments&quot;: &quot;This Farmer was created while testing&quot;,&#xd;
	&quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
	&quot;loggedTime&quot;: &quot;${__time(dd/mm/YYYY)}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/addAdditionalInfo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber == &quot;${mobileNumber}&quot;

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != null 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower- growerId - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber != null

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != ${growerId} 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFarm - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${phoneNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;landHolding&quot;: ${landHolding},&#xd;
    &quot;soilType&quot;: &quot;${soilType}&quot;,&#xd;
    &quot;canIrrigate&quot;: &quot;${canIrrigate}&quot;,&#xd;
    &quot;irrigationType&quot;: &quot;${irrigationType}&quot;,&#xd;
    &quot;ownershipOfFarmingVehicle&quot;: &quot;${ownershipOfFarmingVehicle}&quot;,&#xd;
    &quot;typeOfFarmingVehicle&quot;: &quot;${typeOfFarmingVehicle}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveFarm</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

// Defect 11-11-2014
//assert result.mobileNumber == &quot;${mobileNumber}&quot; // mobileNumber OR phoneNumber

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.farmId != null 

assert result.landHolding == &quot;${landHolding}&quot;

assert result.soilType == &quot;${soilType}&quot;

assert result.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert result.irrigationType == &quot;${irrigationType}&quot;
}

assert result.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert result.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*
 assert   (result.mobileNumber == ${mobileNumber} || 
         result.otherPhoneNumbers[0] == ${mobileNumber} ||
         result.otherPhoneNumbers[1] == ${mobileNumber} ||
         result.otherPhoneNumbers[2] == ${mobileNumber})
*/

</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">farmId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;farmId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllFarms - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/getAllFarms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString()) 

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

// Defect 11-11-2014
//assert resultZero.mobileNumber == &quot;${mobileNumber}&quot; 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.farmId != null 

assert resultZero.landHolding == &quot;${landHolding}&quot;

assert resultZero.soilType == &quot;${soilType}&quot;

assert resultZero.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert resultZero.irrigationType == &quot;${irrigationType}&quot;
}

assert resultZero.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert resultZero.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers[0] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveCrop - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
        &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
        &quot;farmId&quot;: &quot;${farmId}&quot;,&#xd;
        &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
        &quot;cropName&quot;: &quot;${cropName}&quot;,&#xd;
        &quot;preferredCropLand&quot;: &quot;${preferredCropLand}&quot;,&#xd;
        &quot;interCropPractice&quot;: &quot;${interCropPractice}&quot;,&#xd;
        &quot;previousYearsYieldUnit&quot;: &quot;${previousYearsYieldUnit}&quot;,&#xd;
        &quot;previousYearsyield&quot;: &quot;${previousYearsyield}&quot;,&#xd;
        &quot;interCropNameList&quot;: [${interCropNameList}],&#xd;
        &quot;hybrids&quot;: {&#xd;
            &quot;${hybridName}&quot;: {&#xd;
                &quot;acerAge&quot;: &quot;${acerAge}&quot;,&#xd;
                &quot;seedCompany&quot;: &quot;${seedCompany}&quot;,&#xd;
                &quot;sowingDt&quot;: &quot;${sowingDt}&quot;,&#xd;
                &quot;daysAfterSowing&quot;: &quot;${daysAfterSowing}&quot;,&#xd;
                &quot;hybridIdentificationNo&quot;: [${hybridIdentificationNo}]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveCrop</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

// Will result show all crops or crops in request ?
assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cropId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;cropId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerCrop - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
      &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
      &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerCrop</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFinancial - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;loan&quot;: &quot;${loan}&quot;,&#xd;
    &quot;financialOrganization&quot;: &quot;${financialOrganization}&quot;,&#xd;
    &quot;loanDetails&quot;: &quot;${loanDetails}&quot;,&#xd;
    &quot;cropInsurance&quot;: &quot;${cropInsurance}&quot;,&#xd;
    &quot;cropInsuranceDetails&quot;: &quot;${cropInsuranceDetails}&quot;,&#xd;
    &quot;weatherInsurance&quot;: &quot;${weatherInsurance}&quot;,&#xd;
    &quot;weatherInsuranceDetails&quot;: &quot;${weatherInsuranceDetails}&quot;,&#xd;
    &quot;cropInsuranceDetailsText&quot;: &quot;${cropInsuranceDetailsText}&quot;,&#xd;
    &quot;weatherInsuranceDetailsText&quot;: &quot;${weatherInsuranceDetailsText}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/saveFinancial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result.growerId != null 

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.financialId != null 

assert result.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert result.financialOrganization == &quot;${financialOrganization}&quot;
	assert result.loanDetails == &quot;${loanDetails}&quot;
}

assert result.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert result.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert result.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert result.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert result.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert result.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">financialId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;financialId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerFinancial - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerFinancial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber[0] == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName[0] == &quot;${growerName}&quot;

assert resultZero.financialId != null 

assert resultZero.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert resultZero.financialOrganization == &quot;${financialOrganization}&quot;
	assert resultZero.loanDetails == &quot;${loanDetails}&quot;
}

assert resultZero.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert resultZero.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert resultZero.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert resultZero.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler- After Test" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LookUp Services" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">8093</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demographic services" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/country/IN</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert prev.isResponseCodeOK()
log.info(&quot;Execution Continues&quot;)

assert result instanceof List

def resultSize = result.size()

assert resultSize == 1

def resultZero = result[0]

assert resultZero instanceof Map

assert resultZero.countryId != null
assert resultZero.countryName != null
assert resultZero.countryCode != null

assert resultZero.mobilenumberlength != null

assert resultZero.availablecurrency instanceof Map
assert resultZero.availablecurrency.size() &gt;= 1

assert resultZero.selectedcurrency instanceof Map
assert resultZero.selectedcurrency.size() == 1

assert resultZero.defaultlanguage != null
assert resultZero.defaultlanguageid != null

def defLang = resultZero.defaultlanguage
def defLangId = resultZero.defaultlanguageid

assert resultZero.availablelanguages.size() &gt;= 1

assert resultZero.availablelanguages.&quot;${defLangId}&quot; == &quot;${defLang}&quot;

/////////////////////////////////////////////////////////////////////////////
assert resultZero.availablelanguages.values().containsAll(resultZero.supportedlanguages.values())
////////////////////////////////////////////////////////////////////////////

assert resultZero.availableweights instanceof List
assert resultZero.availableweights.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availableweights.containsAll(resultZero.selectedweight)



assert resultZero.availablelandholdingunit instanceof List
assert resultZero.availablelandholdingunit.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availablelandholdingunit.containsAll(resultZero.seletedlandholdingunit)

assert resultZero.minlandholdingunit == 1
assert resultZero.maxlandholdingunit == 200

assert resultZero.education instanceof List
assert resultZero.education.size() &gt;= 1

assert resultZero.income instanceof List
assert resultZero.income.size() &gt;= 1

assert resultZero.availablefinancialorganization instanceof List
assert resultZero.availablefinancialorganization.size() &gt;= 1

assert resultZero.availablefinancialorganization.containsAll(resultZero.selectedfinancialorganization)

assert resultZero.loanrange instanceof List
assert resultZero.loanrange.size() &gt;= 1

assert resultZero.soiltype instanceof List
assert resultZero.soiltype.size() &gt;= 1

assert resultZero.irrigationtype instanceof List
assert resultZero.irrigationtype.size() &gt;= 1

// Crop ....

assert resultZero.crop instanceof Map
assert resultZero.crop.size() &gt;= 1



//Crop

assert resultZero.salutations instanceof List
assert resultZero.salutations.size() &gt;= 1

assert resultZero.phoneModels instanceof List
assert resultZero.phoneModels.size() &gt;= 1

assert resultZero.registrationChannels instanceof List
assert resultZero.registrationChannels.size() &gt;= 1

assert resultZero.subscriptions instanceof List
assert resultZero.subscriptions.size() &gt;= 1

assert resultZero.farmVehicleTypes instanceof List
assert resultZero.farmVehicleTypes.size() &gt;= 1

assert resultZero.interCropPractices instanceof List
assert resultZero.interCropPractices.size() &gt;= 1

assert resultZero.farmLandHolding instanceof List
assert resultZero.farmLandHolding.size() &gt;= 1

assert resultZero.preferredCropLandHolding instanceof List
assert resultZero.preferredCropLandHolding.size() &gt;= 1

assert resultZero.hybridAcreage instanceof List
assert resultZero.hybridAcreage.size() &gt;= 1

/*
assert resultZero.availablelanguages.containsKey(&quot;en_IN&quot;)  
assert resultZero.availablelanguages.containsValue(&quot;English&quot;) 

*/




</stringProp>
              </BSFAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;${country}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - District" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;${country}&quot;,&#xd;
	&quot;level1&quot;:&quot;${country}-${state}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - Taluk" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;IN&quot;,&#xd;
	&quot;level1&quot;:&quot;${country}-${state}&quot;,&#xd;
	&quot;level2&quot;:&quot;${district}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>false</timestamp>
              <success>false</success>
              <label>false</label>
              <code>false</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Smoke Test - Service Collections" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loop,10)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadCount,10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUpPeriodInSeconds,10)}</stringProp>
        <longProp name="ThreadGroup.start_time">1412824976000</longProp>
        <longProp name="ThreadGroup.end_time">1412824976000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
          <stringProp name="HTTPSampler.port">${port1}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${__P(timeOut,5000)}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${__P(timeOut,5000)}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Register parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="mobileNumber" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber</stringProp>
              <stringProp name="Argument.value">${__Random(${num1},${num2})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="growerName" elementType="Argument">
              <stringProp name="Argument.name">growerName</stringProp>
              <stringProp name="Argument.value">Surya</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber2" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber2</stringProp>
              <stringProp name="Argument.value">${__Random(${num1},${num2})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber3" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber3</stringProp>
              <stringProp name="Argument.value">${__Random(${num1},${num2})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="mobileNumber4" elementType="Argument">
              <stringProp name="Argument.name">mobileNumber4</stringProp>
              <stringProp name="Argument.value">${__Random(${num1},${num2})}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="languagePreference" elementType="Argument">
              <stringProp name="Argument.name">languagePreference</stringProp>
              <stringProp name="Argument.value">en_IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gender" elementType="Argument">
              <stringProp name="Argument.name">gender</stringProp>
              <stringProp name="Argument.value">Mr</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">MH</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="district" elementType="Argument">
              <stringProp name="Argument.name">district</stringProp>
              <stringProp name="Argument.value">Pune</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="taluk" elementType="Argument">
              <stringProp name="Argument.name">taluk</stringProp>
              <stringProp name="Argument.value">Khed</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="village" elementType="Argument">
              <stringProp name="Argument.name">village</stringProp>
              <stringProp name="Argument.value">Alandi </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="income" elementType="Argument">
              <stringProp name="Argument.name">income</stringProp>
              <stringProp name="Argument.value">Rs 50,001 to Rs 75,000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lat" elementType="Argument">
              <stringProp name="Argument.name">lat</stringProp>
              <stringProp name="Argument.value">17.7178° N</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="long" elementType="Argument">
              <stringProp name="Argument.name">long</stringProp>
              <stringProp name="Argument.value">73.3939° E</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="phoneModel" elementType="Argument">
              <stringProp name="Argument.name">phoneModel</stringProp>
              <stringProp name="Argument.value">SmartPhone</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="education" elementType="Argument">
              <stringProp name="Argument.name">education</stringProp>
              <stringProp name="Argument.value">Graduation</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dateOfBirth" elementType="Argument">
              <stringProp name="Argument.name">dateOfBirth</stringProp>
              <stringProp name="Argument.value">15/02/1975</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="agentName" elementType="Argument">
              <stringProp name="Argument.name">agentName</stringProp>
              <stringProp name="Argument.value">test.1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Search parameters" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="phoneNumber" elementType="Argument">
              <stringProp name="Argument.name">phoneNumber</stringProp>
              <stringProp name="Argument.value">${mobileNumber}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="regionCode" elementType="Argument">
              <stringProp name="Argument.name">regionCode</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Farm Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="landHolding" elementType="Argument">
              <stringProp name="Argument.name">landHolding</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="soilType" elementType="Argument">
              <stringProp name="Argument.name">soilType</stringProp>
              <stringProp name="Argument.value">HEAVY</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="canIrrigate" elementType="Argument">
              <stringProp name="Argument.name">canIrrigate</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="irrigationType" elementType="Argument">
              <stringProp name="Argument.name">irrigationType</stringProp>
              <stringProp name="Argument.value">Sprinkler</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ownershipOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">ownershipOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="typeOfFarmingVehicle" elementType="Argument">
              <stringProp name="Argument.name">typeOfFarmingVehicle</stringProp>
              <stringProp name="Argument.value">Tractor</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Financial Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="loan" elementType="Argument">
              <stringProp name="Argument.name">loan</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="financialOrganization" elementType="Argument">
              <stringProp name="Argument.name">financialOrganization</stringProp>
              <stringProp name="Argument.value">HDFC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="loanDetails" elementType="Argument">
              <stringProp name="Argument.name">loanDetails</stringProp>
              <stringProp name="Argument.value">Loan term is 10 years</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsurance" elementType="Argument">
              <stringProp name="Argument.name">weatherInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetails</stringProp>
              <stringProp name="Argument.value">HDFC ERGO</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="weatherInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">weatherInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Weather insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsurance" elementType="Argument">
              <stringProp name="Argument.name">cropInsurance</stringProp>
              <stringProp name="Argument.value">Yes</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetails" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetails</stringProp>
              <stringProp name="Argument.value">ICICI Lombard</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cropInsuranceDetailsText" elementType="Argument">
              <stringProp name="Argument.name">cropInsuranceDetailsText</stringProp>
              <stringProp name="Argument.value">Interested in Monsanto Crop insurance</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Save Crop Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="cropName" elementType="Argument">
              <stringProp name="Argument.name">cropName</stringProp>
              <stringProp name="Argument.value">Cotton</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preferredCropLand" elementType="Argument">
              <stringProp name="Argument.name">preferredCropLand</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropPractice" elementType="Argument">
              <stringProp name="Argument.name">interCropPractice</stringProp>
              <stringProp name="Argument.value">Parallel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsyield" elementType="Argument">
              <stringProp name="Argument.name">previousYearsyield</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridName" elementType="Argument">
              <stringProp name="Argument.name">hybridName</stringProp>
              <stringProp name="Argument.value">BRAHMABG2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acerAge" elementType="Argument">
              <stringProp name="Argument.name">acerAge</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="seedCompany" elementType="Argument">
              <stringProp name="Argument.name">seedCompany</stringProp>
              <stringProp name="Argument.value">Monsanto</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sowingDt" elementType="Argument">
              <stringProp name="Argument.name">sowingDt</stringProp>
              <stringProp name="Argument.value">2015-01-01T12:00:00.000Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="daysAfterSowing" elementType="Argument">
              <stringProp name="Argument.name">daysAfterSowing</stringProp>
              <stringProp name="Argument.value">-2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="hybridIdentificationNo" elementType="Argument">
              <stringProp name="Argument.name">hybridIdentificationNo</stringProp>
              <stringProp name="Argument.value">&quot;L1&quot;,&quot;G5&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="previousYearsYieldUnit" elementType="Argument">
              <stringProp name="Argument.name">previousYearsYieldUnit</stringProp>
              <stringProp name="Argument.value">Quintals</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="interCropNameList" elementType="Argument">
              <stringProp name="Argument.name">interCropNameList</stringProp>
              <stringProp name="Argument.value">&quot;CUCUMBER&quot;,&quot;BEANS&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Countries LookUp Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="countries_1" elementType="Argument">
              <stringProp name="Argument.name">countries_1</stringProp>
              <stringProp name="Argument.value">IN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_2" elementType="Argument">
              <stringProp name="Argument.name">countries_2</stringProp>
              <stringProp name="Argument.value">US</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="countries_3" elementType="Argument">
              <stringProp name="Argument.name">countries_3</stringProp>
              <stringProp name="Argument.value">ALL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FarmerSearch Servcies" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;phoneNumber&quot;: &quot;${__Random(${num1},${num2})&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1910833212">200||204</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber == &quot;${mobileNumber}&quot;

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != null 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">growerId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;growerId&quot;:&quot;(.+?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">prev.getResponseCode()==204</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RegisterGrower - HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;regionCode&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;mobileNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;otherPhoneNumbers&quot;: [&#xd;
    					&quot;${mobileNumber2}&quot;,&#xd;
        				&quot;${mobileNumber3}&quot;,&#xd;
        				&quot;${mobileNumber4}&quot;&#xd;
    ],&#xd;
    &quot;languagePreference&quot;: &quot;${languagePreference}&quot;,&#xd;
    &quot;gender&quot;: &quot;${gender}&quot;,&#xd;
    &quot;state&quot;: &quot;${state}&quot;,&#xd;
    &quot;district&quot;: &quot;${district}&quot;,&#xd;
    &quot;taluk&quot;: &quot;${taluk}&quot;,&#xd;
    &quot;village&quot;: &quot;${village}&quot;,&#xd;
    &quot;education&quot;: &quot;${education}&quot;,&#xd;
    &quot;income&quot;: &quot;${income}&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;${dateOfBirth}&quot;,&#xd;
    &quot;phoneModel&quot;: &quot;${phoneModel}&quot;,&#xd;
    &quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
    &quot;latitude&quot;:&quot;18.9750? N&quot;,&#xd;
    &quot;longitude&quot;:&quot;72.8258? E&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/registerGrower</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

assert result.mobileNumber == &quot;${mobileNumber}&quot;

assert result.otherPhoneNumbers instanceof List

assert result.otherPhoneNumbers.size() &lt;= 3

assert result.regionCode == &quot;${regionCode}&quot;

assert result.growerId != null 

assert result.growerName == &quot;${growerName}&quot;

assert result.gender == &quot;${gender}&quot; 

assert result.languagePreference == &quot;${languagePreference}&quot;

assert result.state == &quot;${state}&quot;
assert result.district == &quot;${district}&quot;
assert result.taluk == &quot;${taluk}&quot;

assert result.village == &quot;${village}&quot;

assert result.income == &quot;${income}&quot;
assert result.education == &quot;${education}&quot;

assert result.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert result.phoneModel == &quot;${phoneModel}&quot;

// More detailed date assertion
//assert result.dob ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

//assert result.latitude == ${lat}
//assert result.longitude == ${long}

/* assert (result.mobileNumber == ${mobileNumber} || 
   result.otherPhoneNumbers[0] == ${mobileNumber} ||
   result.otherPhoneNumbers[1] == ${mobileNumber} ||
   result.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
              </BSFAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addAdditionalInfo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
	&quot;comments&quot;: &quot;This Farmer was created while testing&quot;,&#xd;
	&quot;agentName&quot;: &quot;${agentName}&quot;,&#xd;
	&quot;loggedTime&quot;: &quot;${__time(dd/mm/YYYY)}&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/addAdditionalInfo</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFarm - HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${phoneNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;landHolding&quot;: ${landHolding},&#xd;
    &quot;soilType&quot;: &quot;${soilType}&quot;,&#xd;
    &quot;canIrrigate&quot;: &quot;${canIrrigate}&quot;,&#xd;
    &quot;irrigationType&quot;: &quot;${irrigationType}&quot;,&#xd;
    &quot;ownershipOfFarmingVehicle&quot;: &quot;${ownershipOfFarmingVehicle}&quot;,&#xd;
    &quot;typeOfFarmingVehicle&quot;: &quot;${typeOfFarmingVehicle}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/saveFarm</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof Map

// Defect 11-11-2014
//assert result.mobileNumber == &quot;${mobileNumber}&quot; // mobileNumber OR phoneNumber

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.farmId != null 

assert result.landHolding == &quot;${landHolding}&quot;

assert result.soilType == &quot;${soilType}&quot;

assert result.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert result.irrigationType == &quot;${irrigationType}&quot;
}

assert result.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert result.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*
 assert   (result.mobileNumber == ${mobileNumber} || 
         result.otherPhoneNumbers[0] == ${mobileNumber} ||
         result.otherPhoneNumbers[1] == ${mobileNumber} ||
         result.otherPhoneNumbers[2] == ${mobileNumber})
*/

</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">farmId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;farmId&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveCrop - HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
        &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
        &quot;farmId&quot;: &quot;${farmId}&quot;,&#xd;
        &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
        &quot;cropName&quot;: &quot;${cropName}&quot;,&#xd;
        &quot;preferredCropLand&quot;: &quot;${preferredCropLand}&quot;,&#xd;
        &quot;interCropPractice&quot;: &quot;${interCropPractice}&quot;,&#xd;
        &quot;previousYearsYieldUnit&quot;: &quot;${previousYearsYieldUnit}&quot;,&#xd;
        &quot;previousYearsyield&quot;: &quot;${previousYearsyield}&quot;,&#xd;
        &quot;interCropNameList&quot;: [${interCropNameList}],&#xd;
        &quot;hybrids&quot;: {&#xd;
            &quot;${hybridName}&quot;: {&#xd;
                &quot;acerAge&quot;: &quot;${acerAge}&quot;,&#xd;
                &quot;seedCompany&quot;: &quot;${seedCompany}&quot;,&#xd;
                &quot;sowingDt&quot;: &quot;${sowingDt}&quot;,&#xd;
                &quot;daysAfterSowing&quot;: &quot;${daysAfterSowing}&quot;,&#xd;
                &quot;hybridIdentificationNo&quot;: [${hybridIdentificationNo}]&#xd;
            }&#xd;
        }&#xd;
    }&#xd;
]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/saveCrop</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

// Will result show all crops or crops in request ?
assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cropId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;cropId&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="saveFinancial - HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
    &quot;phoneNumber&quot;: &quot;${mobileNumber}&quot;,&#xd;
    &quot;region&quot;: &quot;${regionCode}&quot;,&#xd;
    &quot;growerName&quot;: &quot;${growerName}&quot;,&#xd;
    &quot;loan&quot;: &quot;${loan}&quot;,&#xd;
    &quot;financialOrganization&quot;: &quot;${financialOrganization}&quot;,&#xd;
    &quot;loanDetails&quot;: &quot;${loanDetails}&quot;,&#xd;
    &quot;cropInsurance&quot;: &quot;${cropInsurance}&quot;,&#xd;
    &quot;cropInsuranceDetails&quot;: &quot;${cropInsuranceDetails}&quot;,&#xd;
    &quot;weatherInsurance&quot;: &quot;${weatherInsurance}&quot;,&#xd;
    &quot;weatherInsuranceDetails&quot;: &quot;${weatherInsuranceDetails}&quot;,&#xd;
    &quot;cropInsuranceDetailsText&quot;: &quot;${cropInsuranceDetailsText}&quot;,&#xd;
    &quot;weatherInsuranceDetailsText&quot;: &quot;${weatherInsuranceDetailsText}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/saveFinancial</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result.growerId != null 

assert result.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName == &quot;${growerName}&quot;

assert result.financialId != null 

assert result.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert result.financialOrganization == &quot;${financialOrganization}&quot;
	assert result.loanDetails == &quot;${loanDetails}&quot;
}

assert result.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert result.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert result.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert result.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert result.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert result.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
              </BSFAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">financialId</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;financialId&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchGrower- growerId - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
  &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrower</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())
assert prev.isResponseCodeOK()

assert result instanceof List
 
assert result.size() == 1

def resultZero = result[0]

assert resultZero.mobileNumber != null

assert resultZero.otherPhoneNumbers instanceof List

assert resultZero.otherPhoneNumbers.size() &lt;= 3

assert resultZero.regionCode == &quot;${regionCode}&quot;

assert resultZero.growerId != ${growerId} 

assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.gender == &quot;${gender}&quot;

assert resultZero.languagePreference == &quot;${languagePreference}&quot;

assert resultZero.state == &quot;${state}&quot;
assert resultZero.district == &quot;${district}&quot;
assert resultZero.taluk == &quot;${taluk}&quot;

assert resultZero.village == &quot;${village}&quot;

assert resultZero.education == &quot;${education}&quot;

assert resultZero.dateOfBirth ==~ /\d{2}\/\d{2}\/\d{4}/ 

assert resultZero.phoneModel == &quot;${phoneModel}&quot;

assert resultZero.containsKey(&quot;subscriptionStatus&quot;)
assert resultZero.containsKey(&quot;registrationChannel&quot;)
assert resultZero.containsKey(&quot;loyalty&quot;)

if (resultZero.containsKey(&quot;information&quot;)){
	def information = resultZero.information
	assert information.size() &lt;= 20
	for (i in information){
		assert i.containsKey(&quot;agentName&quot;)
		assert i.containsKey(&quot;growerId&quot;)
		assert i.containsKey(&quot;region&quot;)
		assert i.containsKey(&quot;comments&quot;)
		assert i.containsKey(&quot;loggedTime&quot;)
	}   
}

//assert resultZero.latitude == ${lat}
//assert resultZero.longitude == ${long}


// More detailed date assertion
//assert resultZero.dateOfBirth ==~ ^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$ 

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers== ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllFarms - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;growerId&quot;: &quot;${growerId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/getAllFarms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString()) 

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

// Defect 11-11-2014
//assert resultZero.mobileNumber == &quot;${mobileNumber}&quot; 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.farmId != null 

assert resultZero.landHolding == &quot;${landHolding}&quot;

assert resultZero.soilType == &quot;${soilType}&quot;

assert resultZero.canIrrigate == &quot;${canIrrigate}&quot;

if (&quot;${canIrrigate}&quot; == &quot;yes&quot;) {
	assert resultZero.irrigationType == &quot;${irrigationType}&quot;
}

assert resultZero.ownershipOfFarmingVehicle == &quot;${ownershipOfFarmingVehicle}&quot;

if (&quot;${ownershipOfFarmingVehicle}&quot; == &quot;yes&quot;) {
	assert resultZero.typeOfFarmingVehicle == &quot;${typeOfFarmingVehicle}&quot;
}

/*assert   (resultZero.mobileNumber == ${mobileNumber} || 
         resultZero.otherPhoneNumbers[0] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[1] == ${mobileNumber} ||
         resultZero.otherPhoneNumbers[2] == ${mobileNumber})
*/
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerCrop - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
      &quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
      &quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerCrop</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert result instanceof List

assert result.size() &gt;= 1

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert resultZero.phoneNumber == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert resultZero.growerName == &quot;${growerName}&quot;

assert resultZero.cropId != null

assert resultZero.cropName == &quot;${cropName}&quot;

assert resultZero.preferredCropLand == &quot;${preferredCropLand}&quot;

assert resultZero.interCropPractice == &quot;${interCropPractice}&quot;

assert resultZero.previousYearsyield == &quot;${previousYearsyield}&quot;

assert resultZero.previousYearsYieldUnit == &quot;${previousYearsYieldUnit}&quot;

if (&quot;${interCropPractice}&quot; == &quot;Yes&quot;) {
	assert resultZero.interCropNameList == [${interCropNameList}]
}

// Assertions for Hybrid details
// ...

assert resultZero.hybrids.containsKey(&quot;${hybridName}&quot;)

assert resultZero.hybrids.${hybridName} instanceof Map

assert resultZero.hybrids.${hybridName}.containsKey(&quot;acerAge&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;seedCompany&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;sowingDt&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;daysAfterSowing&quot;)

assert resultZero.hybrids.${hybridName}.containsKey(&quot;hybridIdentificationNo&quot;)
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="searchGrowerFinancial - HTTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;growerId&quot;: &quot;${growerId}&quot;,&#xd;
	&quot;region&quot;: &quot;${regionCode}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/searchGrowerFinancial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion - Groovy" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

def resultZero = result[0]

assert resultZero.growerId != null 

assert resultZero.region == &quot;${regionCode}&quot;

// Defect 11-11-2014
//assert result.phoneNumber[0] == &quot;${mobileNumber}&quot;

// Defect 11-11-2014
//assert result.growerName[0] == &quot;${growerName}&quot;

assert resultZero.financialId != null 

assert resultZero.loan == &quot;${loan}&quot;

if (&quot;${loan}&quot; == &quot;Yes&quot;) {
	assert resultZero.financialOrganization == &quot;${financialOrganization}&quot;
	assert resultZero.loanDetails == &quot;${loanDetails}&quot;
}

assert resultZero.cropInsurance == &quot;${cropInsurance}&quot;

if (&quot;${cropInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.cropInsuranceDetails == &quot;${cropInsuranceDetails}&quot;
	assert resultZero.cropInsuranceDetailsText == &quot;${cropInsuranceDetailsText}&quot;
}

assert resultZero.weatherInsurance == &quot;${weatherInsurance}&quot;

if (&quot;${weatherInsurance}&quot; == &quot;Yes&quot;) {
	assert resultZero.weatherInsuranceDetails == &quot;${weatherInsuranceDetails}&quot;
	assert resultZero.weatherInsuranceDetailsText == &quot;${weatherInsuranceDetailsText}&quot;
}
</stringProp>
            </BSFAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LookUp Services" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
            <stringProp name="HTTPSampler.port">${port2}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Demographic services" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Country" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/country/${country}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import groovy.json.*
def slurper = new JsonSlurper()
def result = slurper.parseText(prev.getResponseDataAsString())

assert prev.isResponseCodeOK()
log.info(&quot;Execution Continues&quot;)

assert result instanceof List

def resultSize = result.size()

assert resultSize == 1

def resultZero = result[0]

assert resultZero instanceof Map

assert resultZero.countryId != null
assert resultZero.countryName != null
assert resultZero.countryCode != null

assert resultZero.mobilenumberlength != null

assert resultZero.availablecurrency instanceof Map
assert resultZero.availablecurrency.size() &gt;= 1

assert resultZero.selectedcurrency instanceof Map
assert resultZero.selectedcurrency.size() == 1

assert resultZero.defaultlanguage != null
assert resultZero.defaultlanguageid != null

def defLang = resultZero.defaultlanguage
def defLangId = resultZero.defaultlanguageid

assert resultZero.availablelanguages.size() &gt;= 1

assert resultZero.availablelanguages.&quot;${defLangId}&quot; == &quot;${defLang}&quot;

/////////////////////////////////////////////////////////////////////////////
assert resultZero.availablelanguages.values().containsAll(resultZero.supportedlanguages.values())
////////////////////////////////////////////////////////////////////////////

assert resultZero.availableweights instanceof List
assert resultZero.availableweights.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availableweights.containsAll(resultZero.selectedweight)



assert resultZero.availablelandholdingunit instanceof List
assert resultZero.availablelandholdingunit.size() &gt;= 1

//assert resultZero.availableweights.contains(resultZero.selectedweight[0])
assert resultZero.availablelandholdingunit.containsAll(resultZero.seletedlandholdingunit)

assert resultZero.minlandholdingunit == 1
assert resultZero.maxlandholdingunit == 200

assert resultZero.education instanceof List
assert resultZero.education.size() &gt;= 1

assert resultZero.income instanceof List
assert resultZero.income.size() &gt;= 1

assert resultZero.availablefinancialorganization instanceof List
assert resultZero.availablefinancialorganization.size() &gt;= 1

assert resultZero.availablefinancialorganization.containsAll(resultZero.selectedfinancialorganization)

assert resultZero.loanrange instanceof List
assert resultZero.loanrange.size() &gt;= 1

assert resultZero.soiltype instanceof List
assert resultZero.soiltype.size() &gt;= 1

assert resultZero.irrigationtype instanceof List
assert resultZero.irrigationtype.size() &gt;= 1

// Crop ....

assert resultZero.crop instanceof Map
assert resultZero.crop.size() &gt;= 1



//Crop

assert resultZero.salutations instanceof List
assert resultZero.salutations.size() &gt;= 1

assert resultZero.phoneModels instanceof List
assert resultZero.phoneModels.size() &gt;= 1

assert resultZero.registrationChannels instanceof List
assert resultZero.registrationChannels.size() &gt;= 1

assert resultZero.subscriptions instanceof List
assert resultZero.subscriptions.size() &gt;= 1

assert resultZero.farmVehicleTypes instanceof List
assert resultZero.farmVehicleTypes.size() &gt;= 1

assert resultZero.interCropPractices instanceof List
assert resultZero.interCropPractices.size() &gt;= 1

assert resultZero.farmLandHolding instanceof List
assert resultZero.farmLandHolding.size() &gt;= 1

assert resultZero.preferredCropLandHolding instanceof List
assert resultZero.preferredCropLandHolding.size() &gt;= 1

assert resultZero.hybridAcreage instanceof List
assert resultZero.hybridAcreage.size() &gt;= 1

/*
assert resultZero.availablelanguages.containsKey(&quot;en_IN&quot;)  
assert resultZero.availablelanguages.containsValue(&quot;English&quot;) 

*/




</stringProp>
              </BSFAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - State" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;countryId&quot;:&quot;IN&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - District" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;IN&quot;,&#xd;
	&quot;level1&quot;:&quot;${regionCode}-${state}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getDemographicDetails - Taluk" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;countryId&quot;:&quot;IN&quot;,&#xd;
	&quot;level1&quot;:&quot;${regionCode}-${state}&quot;,&#xd;
	&quot;level2&quot;:&quot;${district}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/v1/getDemographicDetails</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Clear test variables" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </BSFSampler>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
